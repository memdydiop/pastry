<?php

namespace App\Observers;

use App\Models\UserProfile;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Storage;

class UserProfileObserver
{
    /**
     * Gérer l'événement "updated" du modèle UserProfile.
     *
     * @param  \App\Models\UserProfile  $userProfile
     * @return void
     */
    public function updated(UserProfile $userProfile): void
    {
        // Invalider le cache de l'URL de l'avatar pour refléter les changements immédiatement.
        $this->clearAvatarCache($userProfile);
    }

    /**
     * Gérer l'événement "updating" du modèle UserProfile.
     *
     * @param  \App\Models\UserProfile  $userProfile
     * @return void
     */
    public function updating(UserProfile $userProfile): void
    {
        // Si le champ 'avatar' a été modifié et qu'un ancien avatar existe
        if ($userProfile->isDirty('avatar') && $userProfile->getOriginal('avatar')) {
            // Supprimer l'ancien avatar du disque de stockage public
            Storage::disk('public')->delete($userProfile->getOriginal('avatar'));
        }
    }

    /**
     * Gérer l'événement "deleted" du modèle UserProfile.
     *
     * @param  \App\Models\UserProfile  $userProfile
     * @return void
     */
    public function deleted(UserProfile $userProfile): void
    {
        // Invalider le cache de l'URL de l'avatar.
        $this->clearAvatarCache($userProfile);

        // S'il y a un avatar, le supprimer du stockage.
        if ($userProfile->avatar) {
            Storage::disk('public')->delete($userProfile->avatar);
        }
    }

    /**
     * Supprime la clé de cache de l'URL de l'avatar pour un profil donné.
     *
     * @param UserProfile $userProfile
     * @return void
     */
    protected function clearAvatarCache(UserProfile $userProfile): void
    {
        Cache::forget('user:' . $userProfile->user_id . ':avatar');
    }
}
